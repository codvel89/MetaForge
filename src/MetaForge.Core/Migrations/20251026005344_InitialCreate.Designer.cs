// <auto-generated />
using System;
using System.Collections.Generic;
using MetaForge.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MetaForge.Core.Migrations
{
    [DbContext(typeof(MetadataDbContext))]
    [Migration("20251026005344_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MetaForge.Core.Entities.Audit.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PerformedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Action");

                    b.HasIndex("PerformedAt");

                    b.HasIndex("PerformedBy");

                    b.HasIndex("EntityName", "EntityId");

                    b.ToTable("AuditLogs", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Notification.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FromEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FromName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("HtmlBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TextBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.ToTable("EmailTemplates", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Notification.NotificationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.ToTable("NotificationTemplates", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Security.ApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KeyPrefix")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ApiKeys", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Security.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Resource", "Action")
                        .IsUnique();

                    b.ToTable("Permissions", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Security.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsSystemRole");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Security.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Security.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Security.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.System.Migration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AppliedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("DatabaseConnectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SqlScript")
                        .HasColumnType("text");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AppliedAt");

                    b.HasIndex("Version")
                        .IsUnique();

                    b.ToTable("Migrations", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.System.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssemblyPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Author")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("InstalledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInstalled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsInstalled");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Modules", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.System.ModuleDependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("MinVersion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("RequiredModuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId", "RequiredModuleName")
                        .IsUnique();

                    b.ToTable("ModuleDependencies", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.System.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("SystemSettings", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Workflow.WorkflowDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("StepsDefinition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TriggerEvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.ToTable("WorkflowDefinitions", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Workflow.WorkflowInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContextData")
                        .HasColumnType("text");

                    b.Property<int>("CurrentStep")
                        .HasColumnType("integer");

                    b.Property<string>("Error")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StartedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("WorkflowDefinitionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StartedAt");

                    b.HasIndex("StartedBy");

                    b.HasIndex("Status");

                    b.HasIndex("WorkflowDefinitionId");

                    b.ToTable("WorkflowInstances", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Workflow.WorkflowStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("Input")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Output")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer");

                    b.Property<int>("WorkflowInstanceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StartedAt");

                    b.HasIndex("Status");

                    b.HasIndex("StepOrder");

                    b.HasIndex("WorkflowInstanceId");

                    b.ToTable("WorkflowSteps", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Shared.DatabaseConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DefaultSchema")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("PoolSize")
                        .HasColumnType("integer");

                    b.Property<int>("TimeoutSeconds")
                        .HasColumnType("integer");

                    b.Property<bool>("UseSsl")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DatabaseConnections", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Shared.TableDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("EnableAudit")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSoftDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableWorkflow")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsSystemTable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PluralName")
                        .HasColumnType("text");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SingularName")
                        .HasColumnType("text");

                    b.Property<string>("WorkflowDefinitionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Schema")
                        .IsUnique();

                    b.ToTable("TableDefinitions", "metaforge");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Security.ApiKey", b =>
                {
                    b.HasOne("MetaForge.Core.Entities.Security.User", "User")
                        .WithMany("ApiKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Security.RolePermission", b =>
                {
                    b.HasOne("MetaForge.Core.Entities.Security.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaForge.Core.Entities.Security.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Security.UserRole", b =>
                {
                    b.HasOne("MetaForge.Core.Entities.Security.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaForge.Core.Entities.Security.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.System.ModuleDependency", b =>
                {
                    b.HasOne("MetaForge.Core.Entities.System.Module", "Module")
                        .WithMany("Dependencies")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Workflow.WorkflowInstance", b =>
                {
                    b.HasOne("MetaForge.Core.Entities.Workflow.WorkflowDefinition", "WorkflowDefinition")
                        .WithMany("Instances")
                        .HasForeignKey("WorkflowDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowDefinition");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Workflow.WorkflowStep", b =>
                {
                    b.HasOne("MetaForge.Core.Entities.Workflow.WorkflowInstance", "WorkflowInstance")
                        .WithMany("Steps")
                        .HasForeignKey("WorkflowInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowInstance");
                });

            modelBuilder.Entity("MetaForge.Shared.TableDefinition", b =>
                {
                    b.OwnsMany("MetaForge.Shared.BusinessRule", "BusinessRules", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.PrimitiveCollection<List<string>>("Actions")
                                .HasColumnType("text[]");

                            b1.Property<string>("Condition")
                                .HasColumnType("text");

                            b1.Property<string>("ErrorMessage")
                                .HasColumnType("text");

                            b1.Property<string>("Expression")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("TableDefinitionId")
                                .HasColumnType("integer");

                            b1.Property<string>("Trigger")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("TableDefinitionId");

                            b1.ToTable("BusinessRules", "metaforge");

                            b1.WithOwner()
                                .HasForeignKey("TableDefinitionId");
                        });

                    b.OwnsMany("MetaForge.Shared.ColumnDefinition", "Columns", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("DefaultValue")
                                .HasColumnType("text");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<string>("DisplayName")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<bool>("IsAutoIncrement")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsForeignKey")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsIndexed")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsPrimaryKey")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsReadOnly")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsRequired")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsUnique")
                                .HasColumnType("boolean");

                            b1.Property<int?>("MaxLength")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<int?>("Precision")
                                .HasColumnType("integer");

                            b1.Property<int?>("Scale")
                                .HasColumnType("integer");

                            b1.Property<bool>("ShowInForm")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ShowInList")
                                .HasColumnType("boolean");

                            b1.Property<int>("TableDefinitionId")
                                .HasColumnType("integer");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("Id");

                            b1.HasIndex("TableDefinitionId");

                            b1.ToTable("ColumnDefinitions", "metaforge");

                            b1.WithOwner()
                                .HasForeignKey("TableDefinitionId");

                            b1.OwnsOne("MetaForge.Shared.FieldFormConfig", "FormConfig", b2 =>
                                {
                                    b2.Property<int>("ColumnDefinitionId")
                                        .HasColumnType("integer");

                                    b2.PrimitiveCollection<string[]>("AcceptedFormats")
                                        .HasColumnType("text[]");

                                    b2.Property<bool>("AllowSearch")
                                        .HasColumnType("boolean");

                                    b2.Property<string>("Component")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<string[]>("DependsOn")
                                        .HasColumnType("text[]");

                                    b2.Property<string>("DisabledDate")
                                        .HasColumnType("text");

                                    b2.Property<string>("Format")
                                        .HasColumnType("text");

                                    b2.Property<bool>("FullWidth")
                                        .HasColumnType("boolean");

                                    b2.Property<string>("HelpText")
                                        .HasColumnType("text");

                                    b2.Property<string>("InputType")
                                        .HasColumnType("text");

                                    b2.Property<int?>("MaxSizeMB")
                                        .HasColumnType("integer");

                                    b2.Property<int?>("MinSearchLength")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Placeholder")
                                        .HasColumnType("text");

                                    b2.Property<string>("Prefix")
                                        .HasColumnType("text");

                                    b2.Property<string>("ReadOnlyCondition")
                                        .HasColumnType("text");

                                    b2.Property<int?>("Rows")
                                        .HasColumnType("integer");

                                    b2.Property<string>("StoragePath")
                                        .HasColumnType("text");

                                    b2.HasKey("ColumnDefinitionId");

                                    b2.ToTable("FieldFormConfigs", "metaforge");

                                    b2.WithOwner()
                                        .HasForeignKey("ColumnDefinitionId");

                                    b2.OwnsOne("MetaForge.Shared.DataSourceConfig", "DataSource", b3 =>
                                        {
                                            b3.Property<int>("FieldFormConfigColumnDefinitionId")
                                                .HasColumnType("integer");

                                            b3.Property<string>("FilterExpression")
                                                .HasColumnType("text");

                                            b3.Property<string>("LabelField")
                                                .HasColumnType("text");

                                            b3.Property<string>("OrderBy")
                                                .HasColumnType("text");

                                            b3.PrimitiveCollection<string[]>("SearchFields")
                                                .HasColumnType("text[]");

                                            b3.Property<string>("TableName")
                                                .HasColumnType("text");

                                            b3.Property<string>("Type")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("ValueField")
                                                .HasColumnType("text");

                                            b3.HasKey("FieldFormConfigColumnDefinitionId");

                                            b3.ToTable("FieldFormConfigs", "metaforge");

                                            b3.WithOwner()
                                                .HasForeignKey("FieldFormConfigColumnDefinitionId");
                                        });

                                    b2.OwnsMany("MetaForge.Shared.SelectOption", "Options", b3 =>
                                        {
                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b3.Property<int>("Id"));

                                            b3.Property<string>("Color")
                                                .HasColumnType("text");

                                            b3.Property<int>("FieldFormConfigColumnDefinitionId")
                                                .HasColumnType("integer");

                                            b3.Property<string>("Label")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("Value")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.HasKey("Id");

                                            b3.HasIndex("FieldFormConfigColumnDefinitionId");

                                            b3.ToTable("SelectOptions", "metaforge");

                                            b3.WithOwner()
                                                .HasForeignKey("FieldFormConfigColumnDefinitionId");
                                        });

                                    b2.Navigation("DataSource");

                                    b2.Navigation("Options");
                                });

                            b1.OwnsOne("MetaForge.Shared.SequenceConfig", "SequenceConfig", b2 =>
                                {
                                    b2.Property<int>("ColumnDefinitionId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("NumberLength")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Pattern")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Prefix")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("YearFormat")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("ColumnDefinitionId");

                                    b2.ToTable("ColumnDefinitions", "metaforge");

                                    b2.WithOwner()
                                        .HasForeignKey("ColumnDefinitionId");
                                });

                            b1.OwnsMany("MetaForge.Shared.StateTransition", "StateTransitions", b2 =>
                                {
                                    b2.Property<int>("ColumnDefinitionId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("From")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<string[]>("To")
                                        .IsRequired()
                                        .HasColumnType("text[]");

                                    b2.HasKey("ColumnDefinitionId", "Id");

                                    b2.ToTable("StateTransition", "metaforge");

                                    b2.WithOwner()
                                        .HasForeignKey("ColumnDefinitionId");
                                });

                            b1.OwnsMany("MetaForge.Shared.ValidationRule", "ValidationRules", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("ColumnDefinitionId")
                                        .HasColumnType("integer");

                                    b2.Property<Dictionary<string, string>>("Conditions")
                                        .HasColumnType("hstore");

                                    b2.Property<string>("Expression")
                                        .HasColumnType("text");

                                    b2.Property<string>("Message")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Pattern")
                                        .HasColumnType("text");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ColumnDefinitionId");

                                    b2.ToTable("ValidationRules", "metaforge");

                                    b2.WithOwner()
                                        .HasForeignKey("ColumnDefinitionId");
                                });

                            b1.Navigation("FormConfig");

                            b1.Navigation("SequenceConfig");

                            b1.Navigation("StateTransitions");

                            b1.Navigation("ValidationRules");
                        });

                    b.OwnsMany("MetaForge.Shared.ComputedFieldDefinition", "ComputedFields", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("DisplayName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Expression")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Format")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<bool>("ShowInList")
                                .HasColumnType("boolean");

                            b1.Property<int>("TableDefinitionId")
                                .HasColumnType("integer");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("TableDefinitionId");

                            b1.ToTable("ComputedFieldDefinitions", "metaforge");

                            b1.WithOwner()
                                .HasForeignKey("TableDefinitionId");
                        });

                    b.OwnsOne("MetaForge.Shared.FormViewConfig", "FormViewConfig", b1 =>
                        {
                            b1.Property<int>("TableDefinitionId")
                                .HasColumnType("integer");

                            b1.Property<string>("Layout")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<bool>("UseTabs")
                                .HasColumnType("boolean");

                            b1.Property<string>("Width")
                                .HasColumnType("text");

                            b1.HasKey("TableDefinitionId");

                            b1.ToTable("TableDefinitions", "metaforge");

                            b1.WithOwner()
                                .HasForeignKey("TableDefinitionId");

                            b1.OwnsMany("MetaForge.Shared.FormSection", "Sections", b2 =>
                                {
                                    b2.Property<int>("FormViewConfigTableDefinitionId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<bool>("Collapsed")
                                        .HasColumnType("boolean");

                                    b2.PrimitiveCollection<string[]>("Columns")
                                        .IsRequired()
                                        .HasColumnType("text[]");

                                    b2.Property<bool>("FullWidth")
                                        .HasColumnType("boolean");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("FormViewConfigTableDefinitionId", "Id");

                                    b2.ToTable("FormSection", "metaforge");

                                    b2.WithOwner()
                                        .HasForeignKey("FormViewConfigTableDefinitionId");
                                });

                            b1.Navigation("Sections");
                        });

                    b.OwnsMany("MetaForge.Shared.IndexDefinition", "Indexes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.PrimitiveCollection<string[]>("Columns")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<string>("IndexType")
                                .HasColumnType("text");

                            b1.Property<bool>("IsUnique")
                                .HasColumnType("boolean");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("TableDefinitionId")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("TableDefinitionId");

                            b1.ToTable("IndexDefinitions", "metaforge");

                            b1.WithOwner()
                                .HasForeignKey("TableDefinitionId");
                        });

                    b.OwnsOne("MetaForge.Shared.ListViewConfig", "ListViewConfig", b1 =>
                        {
                            b1.Property<int>("TableDefinitionId")
                                .HasColumnType("integer");

                            b1.Property<int>("DefaultPageSize")
                                .HasColumnType("integer");

                            b1.Property<string>("DefaultSortColumn")
                                .HasColumnType("text");

                            b1.Property<string>("DefaultSortOrder")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<bool>("EnableExport")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableFilters")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableSearch")
                                .HasColumnType("boolean");

                            b1.PrimitiveCollection<string[]>("ExportFormats")
                                .HasColumnType("text[]");

                            b1.PrimitiveCollection<string[]>("GroupBy")
                                .HasColumnType("text[]");

                            b1.PrimitiveCollection<string[]>("SearchColumns")
                                .HasColumnType("text[]");

                            b1.HasKey("TableDefinitionId");

                            b1.ToTable("TableDefinitions", "metaforge");

                            b1.WithOwner()
                                .HasForeignKey("TableDefinitionId");

                            b1.OwnsMany("MetaForge.Shared.Aggregation", "Aggregations", b2 =>
                                {
                                    b2.Property<int>("ListViewConfigTableDefinitionId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Field")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Format")
                                        .HasColumnType("text");

                                    b2.Property<string>("Function")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Label")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("ListViewConfigTableDefinitionId", "Id");

                                    b2.ToTable("Aggregation", "metaforge");

                                    b2.WithOwner()
                                        .HasForeignKey("ListViewConfigTableDefinitionId");
                                });

                            b1.OwnsMany("MetaForge.Shared.QuickFilter", "QuickFilters", b2 =>
                                {
                                    b2.Property<int>("ListViewConfigTableDefinitionId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Expression")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Icon")
                                        .HasColumnType("text");

                                    b2.Property<string>("Label")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("ListViewConfigTableDefinitionId", "Id");

                                    b2.ToTable("QuickFilter", "metaforge");

                                    b2.WithOwner()
                                        .HasForeignKey("ListViewConfigTableDefinitionId");
                                });

                            b1.Navigation("Aggregations");

                            b1.Navigation("QuickFilters");
                        });

                    b.OwnsMany("MetaForge.Shared.RelationDefinition", "Relations", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("CascadeDelete")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DisplayInForm")
                                .HasColumnType("boolean");

                            b1.Property<string>("ForeignKeyColumn")
                                .HasColumnType("text");

                            b1.Property<bool>("LoadByDefault")
                                .HasColumnType("boolean");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("OnDelete")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("RelatedColumn")
                                .HasColumnType("text");

                            b1.Property<string>("RelatedForeignKey")
                                .HasColumnType("text");

                            b1.Property<string>("RelatedTable")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("TableDefinitionId")
                                .HasColumnType("integer");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("TableDefinitionId");

                            b1.ToTable("RelationDefinitions", "metaforge");

                            b1.WithOwner()
                                .HasForeignKey("TableDefinitionId");

                            b1.OwnsOne("MetaForge.Shared.RelationFormConfig", "FormConfig", b2 =>
                                {
                                    b2.Property<int>("RelationDefinitionId")
                                        .HasColumnType("integer");

                                    b2.Property<bool>("AllowAdd")
                                        .HasColumnType("boolean");

                                    b2.Property<bool>("AllowDelete")
                                        .HasColumnType("boolean");

                                    b2.Property<bool>("AllowEdit")
                                        .HasColumnType("boolean");

                                    b2.Property<string>("Component")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<bool>("InlineEditing")
                                        .HasColumnType("boolean");

                                    b2.Property<int?>("MaxRows")
                                        .HasColumnType("integer");

                                    b2.Property<int?>("MinRows")
                                        .HasColumnType("integer");

                                    b2.HasKey("RelationDefinitionId");

                                    b2.ToTable("RelationDefinitions", "metaforge");

                                    b2.WithOwner()
                                        .HasForeignKey("RelationDefinitionId");
                                });

                            b1.Navigation("FormConfig");
                        });

                    b.OwnsOne("MetaForge.Shared.TablePermissions", "Permissions", b1 =>
                        {
                            b1.Property<int>("TableDefinitionId")
                                .HasColumnType("integer");

                            b1.PrimitiveCollection<string[]>("Create")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.PrimitiveCollection<string[]>("Delete")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.PrimitiveCollection<string[]>("Read")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.PrimitiveCollection<string[]>("Update")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.HasKey("TableDefinitionId");

                            b1.ToTable("TableDefinitions", "metaforge");

                            b1.WithOwner()
                                .HasForeignKey("TableDefinitionId");
                        });

                    b.OwnsMany("MetaForge.Shared.TriggerDefinition", "Triggers", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Condition")
                                .HasColumnType("text");

                            b1.Property<string>("Event")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("TableDefinitionId")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("TableDefinitionId");

                            b1.ToTable("TriggerDefinitions", "metaforge");

                            b1.WithOwner()
                                .HasForeignKey("TableDefinitionId");

                            b1.OwnsMany("MetaForge.Shared.TriggerAction", "Actions", b2 =>
                                {
                                    b2.Property<int>("TriggerDefinitionId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Condition")
                                        .HasColumnType("text");

                                    b2.Property<string>("Field")
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<string[]>("Recipients")
                                        .HasColumnType("text[]");

                                    b2.Property<string>("Template")
                                        .HasColumnType("text");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Value")
                                        .HasColumnType("text");

                                    b2.Property<string>("WorkflowId")
                                        .HasColumnType("text");

                                    b2.HasKey("TriggerDefinitionId", "Id");

                                    b2.ToTable("TriggerAction", "metaforge");

                                    b2.WithOwner()
                                        .HasForeignKey("TriggerDefinitionId");
                                });

                            b1.Navigation("Actions");
                        });

                    b.Navigation("BusinessRules");

                    b.Navigation("Columns");

                    b.Navigation("ComputedFields");

                    b.Navigation("FormViewConfig");

                    b.Navigation("Indexes");

                    b.Navigation("ListViewConfig");

                    b.Navigation("Permissions");

                    b.Navigation("Relations");

                    b.Navigation("Triggers");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Security.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Security.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Security.User", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.System.Module", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Workflow.WorkflowDefinition", b =>
                {
                    b.Navigation("Instances");
                });

            modelBuilder.Entity("MetaForge.Core.Entities.Workflow.WorkflowInstance", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
